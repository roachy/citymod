--[[if (!CityMod) then
    CityMod = CityMod
else
    CurrentGM = CityMod
    table.Merge(CurrentGM, CityMod)
    CityMod = nil

    CityMod = CityMod
    table.Merge(CityMod, CurrentGM)
    CurrentGM = nil
end]]

DeriveGamemode("sandbox")

CityMod = GM -- Create CityMod gamemode

-- Set details about the gamemode
CityMod.CityModFolder = CityMod.CityModFolder
CityMod.Author = "Seraph"
CityMod.Name = "CityMod"

function CityMod:GetGameDescription()
    return "CityMod"
end

function CityMod:GetGamemodeFolder()
    return CityMod.CityModFolder
end

-- Send this file to the client
AddCSLuaFile()

-- Load the filesystem with the normal GMod way
AddCSLuaFile("utilities/sh_file.lua")
include("utilities/sh_file.lua")

-- Load the rest of the utilities using the filesystem
CityMod.File:Include("utilities/sh_utilities.lua")
CityMod.File:Include("utilities/sh_library.lua")
CityMod.File:Include("utilities/sh_metatable.lua")

-- Load the CityMod libraries
CityMod.File:IncludeDir("libraries")
CityMod.File:IncludeDir("libraries/client")
CityMod.File:IncludeDir("libraries/server")

-- Load the CityMod hooks
CityMod.File:IncludeDir("hooks")

-- Load the CityMod metatables
CityMod.File:IncludeDir("metatables")


-- Begin loading CityMod content. This is content and systems that extends the gamemode
CityMod.File:IncludeDir("commands")
CityMod.File:IncludeDir("maps")
CityMod.File:IncludeDir("packets/client")
CityMod.File:IncludeDir("packets/server")




-- Send client files to client and include on client as well
--CityMod.File:IncludeDir("gui")

if (SERVER) then 
CityGuard.Execute("")
end